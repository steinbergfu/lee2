from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.contract import Contract
import datetime
import threading
import time
import pandas
from ibapi.order import Order
import pandas as pd

class IBapi(EWrapper, EClient):
    def __init__(self):
        EClient.__init__(self, self)
        self.data =[]# Initialize variable to store candle
        self.order_df = pd.DataFrame(columns=[ 'OrderId', 'Symbol', 'Status'])
        self.deal=[]   # the set of executation order id
        self.price=0   #market price
    def historicalData(self, reqId, bar):
       # print(f'DateTime: {bar.date}  Open: {bar.open}  High: {bar.high} Close: {bar.close}  Low: {bar.low}  Volume: {bar.volume}')
        self.data.append([bar.date, bar.open,bar.high,bar.close,bar.low,bar.volume])
        #if len(self.data)==62:
            #   self.data =[]# Initialize variable to store candle
    def nextValidId(self, orderId: int):
        super().nextValidId(orderId)
        self.nextorderId = orderId
        print('The next valid order id is: ', self.nextorderId)


    def openOrder(self, orderId, contract, order, orderState):
        super().openOrder(orderId, contract, order, orderState)
        #print( " OrderId:", orderId,
         #       "Symbol:", contract.symbol,  "Status:", orderState.status)
        dictionary = {"OrderId": orderId,
                       "Symbol": contract.symbol, "Status": orderState.status}
        #if "Submitted" in dictionary :
        self.order_df = self.order_df.append(dictionary, ignore_index=True)
    def orderend(self):
        self.order_df.drop(self.order_df.index, inplace=True)

    def execDetails(self, reqId, contract, execution):
        print('Order Executed: ', reqId, contract.symbol, contract.secType, contract.currency, execution.execId, execution.orderId, execution.shares, execution.lastLiquidity)
        self.deal.append(execution.orderId)
    def historicalDataover(self):
        self.data=[]

    def tickPrice(self, reqId, tickType, price, attrib):
        #if tickType == 2 and reqId == 1:
			# print('The current ask price is: ', price)
        self.price=price
    def OneCancelsAll(ocaGroup:str, ocaOrders:ListOfOrder, ocaType:int):
         for o in ocaOrders:
            o.ocaGroup = ocaGroup
            o.ocaType = ocaType
         return ocaOrders

def run_loop():
    app.run()

def marketOrder(direction,quantity):
    order = Order()
    order.action = direction
    order.orderType = "MKT"
    order.totalQuantity = quantity
    return order

def limitOrder(direction,quantity,lt_price):
    order = Order()
    order.action = direction
    order.orderType = "LMT"
    order.totalQuantity = quantity
    order.lmtPrice = lt_price
    return order


def stopOrder(direction,quantity,st_price):
    order = Order()
    order.action = direction
    order.orderType = "STP"
    order.totalQuantity = quantity
    order.auxPrice = st_price
    return order

def placeOCO(ocaOrders):
    for o in ocaOrders:
        app.placeOrder(self.nextOrderId(), contract, o)

app = IBapi()
app.connect('127.0.0.1', 7497, 123)

# Start the socket in a thread
app.nextorderId = None
api_thread = threading.Thread(target=run_loop, daemon=True)
api_thread.start()

time.sleep(1)  # Sleep interval to allow time for connection to server

# Create contract object


contract = Contract()
contract.symbol = 'N225M'
contract.secType = 'FUT'
contract.exchange = 'OSE.JPN'
contract.currency = 'JPY'
contract.lastTradeDateOrContractMonth = '202311'



starttime = time.time()
timeout = time.time() + 60*60*6
#print(datetime.datetime.now().minute % 5)
print(datetime.datetime.now())

signal=None
buy_price=0
sell_price=0

buy_flag= True #  represent there is no order in open status
sell_flag=True
open_order=0
stop_id =0
profit_id=0
while (time.time() <= timeout ):

    if (datetime.datetime.now().minute % 1==0 )and (datetime.datetime.now().second<20):
        print(datetime.datetime.now())
        app.historicalDataover()
        time.sleep(2)
        app.reqHistoricalData(1, contract, '', '1200 S', '1 min', 'TRADES', 0, 1, False, [])
        
        time.sleep(2)  # sleep to allow enough time for data to be returned
        # headers = ['DateTime', 'Open', 'High', 'Low', 'Close','Volume']
        # print(dict(zip(headers, app.data)))
        if datetime.datetime.now().minute % 25==0 :
            print(datetime.datetime.now())
        df_data = {}
        print(123)
        df = pandas.DataFrame(app.data)
        df.columns=['DateTime','Open','High','Close','Low','Volume']
       # df['Datetime'] = df['DateTime'].dt.tz_localize('UTC')
        # print (df['DateTime'] )
        print(df['DateTime'].iloc[-1])
        print(df.shape)
        action_signal=Revsignal1(df)
        print(datetime.datetime.now())

        app.reqIds(-1)
        time.sleep(1)
        app.orderend()
        order_id=app.nextorderId
            # order_id=app.nextorderId
        stop_id=order_id+1
        profit_id=order_id+2
        app.placeOrder(order_id,contract,marketOrder("BUY",1))

        ocaOrders = [stopOrder("Sell",1,df["Close"].iloc[-1]-15), limitOrder("Sell",1,df["Close"].iloc[-1]+15)]
        app.OneCancelsAll("TestOCA_" + str(app.nextValidOrderId), ocaOrders, 0)
        placeOCO(ocaOrders )

           #print(time.localtime(time.time()))
